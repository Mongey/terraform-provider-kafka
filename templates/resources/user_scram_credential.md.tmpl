---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
  A resource for managing Kafka SCRAM user credentials for SASL authentication.
---

# {{.Name}} ({{.Type}})

The `kafka_user_scram_credential` resource manages SCRAM (Salted Challenge Response Authentication Mechanism) credentials for Kafka users. SCRAM provides a secure way to authenticate clients using username/password combinations without transmitting passwords in plain text.

## Example Usage

### Basic SCRAM-SHA-256 User

{{tffile "examples/resources/kafka_user_scram_credential/basic.tf"}}

### SCRAM-SHA-512 User with Custom Iterations

{{tffile "examples/resources/kafka_user_scram_credential/sha512.tf"}}

### Multiple Users with Random Passwords

{{tffile "examples/resources/kafka_user_scram_credential/multiple.tf"}}

### Integration with ACLs

{{tffile "examples/resources/kafka_user_scram_credential/with-acls.tf"}}

## Import

SCRAM credentials can be imported using the format `username|scram_mechanism|password`:

{{codefile "shell" "examples/resources/kafka_user_scram_credential/import.sh"}}

-> **Note:** The password must be provided during import as it cannot be read from Kafka.

{{ .SchemaMarkdown | trimspace }}

## SCRAM Mechanisms

### SCRAM-SHA-256
- Provides good security with reasonable performance
- Recommended for most use cases
- Default iterations: 4096

### SCRAM-SHA-512
- Provides stronger security at a slight performance cost
- Recommended for high-security environments
- Default iterations: 4096

## Client Configuration

After creating SCRAM credentials, configure your Kafka clients:

### Java Client Configuration
```properties
security.protocol=SASL_SSL
sasl.mechanism=SCRAM-SHA-256
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
  username="myuser" \
  password="mypassword";
```

### Python Client (kafka-python)
```python
from kafka import KafkaProducer

producer = KafkaProducer(
    bootstrap_servers=['localhost:9092'],
    security_protocol='SASL_SSL',
    sasl_mechanism='SCRAM-SHA-256',
    sasl_plain_username='myuser',
    sasl_plain_password='mypassword'
)
```

## Best Practices

1. **Use Strong Passwords**: Generate random passwords of sufficient length (32+ characters recommended)
2. **Choose Appropriate Iterations**: Higher iterations provide better security but impact authentication performance
3. **Prefer SCRAM-SHA-512**: For production environments with sensitive data
4. **Secure Password Storage**: Use Terraform variables, environment variables, or secret management systems
5. **Regular Rotation**: Implement a password rotation policy for production environments
6. **Combine with TLS**: Always use SCRAM with TLS encryption (SASL_SSL) in production

~> **Warning:** The password is stored in Terraform state. Ensure your state backend is encrypted and access is restricted.