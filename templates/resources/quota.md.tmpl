---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
  A resource for managing Kafka quotas to control resource usage by clients, users, or IP addresses.
---

# {{.Name}} ({{.Type}})

The `kafka_quota` resource manages Kafka quotas, which are used to limit resource usage and prevent any single client from monopolizing broker resources. Quotas can be applied to clients, users, or IP addresses to control bandwidth and request rates.

## Example Usage

### Client ID Quota

{{tffile "examples/resources/kafka_quota/client.tf"}}

### User Quota

{{tffile "examples/resources/kafka_quota/user.tf"}}

### Default User Quota

{{tffile "examples/resources/kafka_quota/default.tf"}}

### IP Address Quota

{{tffile "examples/resources/kafka_quota/ip.tf"}}

## Import

Kafka quotas can be imported using the entity type and name:

{{codefile "shell" "examples/resources/kafka_quota/import.sh"}}

{{ .SchemaMarkdown | trimspace }}

## Quota Configuration Options

### Bandwidth Quotas
- `producer_byte_rate` - The maximum bytes per second that can be produced by the entity
- `consumer_byte_rate` - The maximum bytes per second that can be consumed by the entity

### Request Rate Quotas
- `request_percentage` - The percentage of CPU time on each broker that the entity can use for requests. Values > 100% indicate multiple CPUs (e.g., 200% = 2 CPUs)

### Connection Quotas (IP-based only)
- `connection_creation_rate` - The maximum rate of new connections per second from the IP address

## Quota Precedence

When multiple quotas apply to a request, Kafka uses the most specific quota:

1. `/config/users/<user>/clients/<client-id>` (most specific)
2. `/config/users/<user>/clients/<default>`
3. `/config/users/<user>`
4. `/config/users/<default>/clients/<client-id>`
5. `/config/users/<default>/clients/<default>`
6. `/config/users/<default>` (least specific)

## Best Practices

1. **Start with Conservative Defaults**: Set reasonable default quotas for all users/clients and then create specific quotas for services that need higher limits.

2. **Monitor Quota Usage**: Use Kafka metrics to monitor quota utilization and adjust as needed. Look for throttling metrics to identify when quotas are being hit.

3. **Use Request Percentage Carefully**: The `request_percentage` quota affects CPU usage. Values over 100% mean the client can use more than one CPU core.

4. **Plan for Growth**: Set quotas with some headroom to accommodate traffic growth, but not so high that a misbehaving client can impact the cluster.

5. **Different Quotas for Different Environments**: Use stricter quotas in development/staging environments compared to production.

-> **Note:** Quotas are applied immediately but may take a few seconds to propagate across all brokers.